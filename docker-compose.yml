version: '3.8'
services:
  messenger-engine:
    image: streamware/messenger-core-engine
    ports:
      - "9000:9000"
    environment:
      - SCYLLA_URI=cassandra:9042
      - PULSAR_SERVICE_URL=pulsar://broker:6650
    depends_on:
      - cassandra
    restart: on-failure
    networks:
      - default
      - pulsar

  auth:
    image: streamware/auth
    ports:
      - "3001:3001"
    environment:
      - MODE=prod
      - APP_PORT=3001
      # - DATABASE_URL=postgresql://postgres:6jliq83an911t0h9rw34l4q73k4xvmen0jbvd2b5@postgres:5432/auth
      - DATABASE_URL=file:./dev.db
      - PULSAR_SERVICE_URL=pulsar://broker:6650
      - ACCESS_TOKEN_EXPIRATION=31556952 # in seconds, default is 24 hours
      - REFRESH_TOKEN_EXPIRATION=31556952 # in seconds, default 1 year
      - ISSUER=http://streamware.co
      - AUDIENCE=http://streamware.co
      - AWS_S3_ENDPOINT= # it should be without http:// or https://
      - AWS_ACCESS_KEY_ID=
      - AWS_SECRET_ACCESS_KEY=
      - AWS_S3_AVATAR_BUCKET=
    depends_on:
      - postgres
    volumes:
      - './keys/private_key.pem:/app/keys/private_key.pem'
      - './keys/public_key.pem:/app/keys/public_key.pem'
    restart: on-failure

  notify-hub:
    image: streamware/notify-hub
    ports:
      - "3004:3004"
    environment:
      - APP_PORT=3004
      - PULSAR_SERVICE_URL=pulsar://broker:6650
      - DATABASE_URL=postgresql://postgres:6jliq83an911t0h9rw34l4q73k4xvmen0jbvd2b5@postgres-notify-hub:5431/notify-hub
      - SENTRY_DSN=https://470ed015c1d7242b17c4ed62a59591dc@o4507489287864320.ingest.de.sentry.io/4507489333870672
      - SENTRY_DEBUG=true
    depends_on:
      - postgres-notify-hub
    restart: on-failure
    networks:
      - default
      - pulsar

  swift-rest-engine:
    image: streamware/swifty-rest-engine
    ports:
      - "3000:3000"
    environment:
      - CASSANDRA_HOST=cassandra
      - CASSANDRA_PORT=9042
      - CASSANDRA_USER=cassandra
      - CASSANDRA_PASSWORD=cassandra
    depends_on:
      - cassandra
    restart: on-failure

  postgres-notify-hub:
    image: postgres:16.2-bookworm
    ports:
      - "5431:5432"
    volumes:
      - ./postgres-notify-hub-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=6jliq83an911t0h9rw34l4q73k4xvmen0jbvd2b5
      - POSTGRES_USER=postgres
      - POSTGRES_DB=notify-hub

  nats:
    container_name: nats
    image: nats
    entrypoint: /nats-server
    command: --name nats --cluster_name JSC --js --sd /data -p 4222
    networks:
    - nats
    ports:
    - 4222:4222
    volumes:
    - ./jetstream-cluster/n1:/data

  postgres:
    image: postgres:16.2-bookworm
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=6jliq83an911t0h9rw34l4q73k4xvmen0jbvd2b5
      - POSTGRES_USER=postgres
      - POSTGRES_DB=auth

  cassandra:
    image: cassandra:4.1.0
    ports:
      - "9042:9042"
    volumes:
      - ./migrations/setup.sh:/usr/setup.sh
      - ./migrations/setup.cql:/usr/setup.cql
    entrypoint: ["/bin/bash", "-c"]
    command:
      - "chmod +x /usr/setup.sh &&
       nohup /usr/setup.sh &> /usr/setup.log &
       docker-entrypoint.sh cassandra -f"

  haproxy:
    image: haproxy:2.9-alpine
    restart: always
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - './keys/private_key.pem:/app/keys/private_key.pem'
      - './keys/public_key.pem:/app/keys/public_key.pem'
    ports:
      - "80:80"
    environment:
      - ISSUER=http://streamware.co
      - AUDIENCE=http://streamware.co
    networks:
      - default
      - proxy

  zookeeper:
    image: apachepulsar/pulsar:latest
    container_name: zookeeper
    restart: on-failure
    networks:
      - pulsar
    volumes:
      - ./apache/zookeeper:/pulsar/data/zookeeper
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - PULSAR_MEM=-Xms256m -Xmx256m -XX:MaxDirectMemorySize=256m
    command: >
      bash -c "bin/apply-config-from-env.py conf/zookeeper.conf && \
             bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
             exec bin/pulsar zookeeper"
    healthcheck:
      test: ["CMD", "bin/pulsar-zookeeper-ruok.sh"]
      interval: 10s
      timeout: 5s
      retries: 30
  

  pulsar-init:
    container_name: pulsar-init
    hostname: pulsar-init
    image: apachepulsar/pulsar:latest
    networks:
      - pulsar
    command: >
      bin/pulsar initialize-cluster-metadata \
               --cluster cluster-a \
               --zookeeper zookeeper:2181 \
               --configuration-store zookeeper:2181 \
               --web-service-url http://broker:8080 \
               --broker-service-url pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy


  bookie:
    image: apachepulsar/pulsar:latest
    container_name: bookie
    restart: on-failure
    networks:
      - pulsar
    environment:
      - clusterName=cluster-a
      - zkServers=zookeeper:2181
      - metadataServiceUri=metadata-store:zk:zookeeper:2181
      # otherwise every time we run docker compose uo or down we fail to start due to Cookie
      # See: https://github.com/apache/bookkeeper/blob/405e72acf42bb1104296447ea8840d805094c787/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java#L57-68
      - advertisedAddress=bookie
      - BOOKIE_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      zookeeper:
        condition: service_healthy
      pulsar-init:
        condition: service_completed_successfully
    # Map the local directory to the container to avoid bookie startup failure due to insufficient container disks.
    volumes:
      - ./apache/bookkeeper:/pulsar/data/bookkeeper
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf && exec bin/pulsar bookie"


  broker:
    image: apachepulsar/pulsar:latest
    container_name: broker
    hostname: broker
    restart: on-failure
    networks:
      - pulsar
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - zookeeperServers=zookeeper:2181
      - clusterName=cluster-a
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=broker
      - advertisedListeners=external:pulsar://127.0.0.1:6650
      - PULSAR_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      zookeeper:
        condition: service_healthy
      bookie:
        condition: service_started
    ports:
      - "6650:6650"
      - "8080:8080"
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf && exec bin/pulsar broker" 

networks:
  proxy:
    external: true
  pulsar:
    driver: bridge
    external: true
