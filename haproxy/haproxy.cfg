global
  log stdout format raw local0 info

defaults
  mode http
  timeout client 10s
  timeout connect 5s
  timeout server 10s
  timeout http-request 10s
  log global

frontend stats
  bind *:8404
  stats enable
  stats uri /
  stats refresh 10s

frontend ft
  bind :80

# Extract and decompose JWT
  http-request set-var(txn.alg) http_auth_bearer,jwt_header_query('$.alg')
  http-request set-var(txn.iss) http_auth_bearer,jwt_payload_query('$.iss')
  http-request set-var(txn.aud) http_auth_bearer,jwt_payload_query('$.aud')
  http-request set-var(txn.exp) http_auth_bearer,jwt_payload_query('$.exp','int')
  http-request set-var(txn.scope) http_auth_bearer,jwt_payload_query('$.scope')

  # New rule to extract 'id' from JWT payload
  http-request set-var(txn.id) http_auth_bearer,jwt_payload_query('$.id')

  # New rule to set X-USER-ID header
  http-request set-header X-USER-ID %[var(txn.id)] if { var(txn.id) -m found }

  acl path_account_auth_login path -i /account/auth/login
  acl path_account_auth_register path -i /account/auth/register
  acl path_account_revoke_token path -i /account/auth/revoke-token

  # Validate the JWT
  # http-request deny content-type 'text/html' string 'Unsupported JWT signing algorithm' unless { var(txn.alg) -m str RS256 }
  http-request set-var(txn.bearer) http_auth_bearer if { http_auth_bearer -m found }
  http-request deny deny_status 401 content-type 'application/json' string '{"error": "Missing Authorization HTTP header"}' if !{ var(txn.bearer) -m found } !path_account_auth_login !path_account_auth_register !path_account_revoke_token
  http-request deny deny_status 401 content-type 'application/json' string '{"error": "Invalid token: issuer is not recognized."}' if !{ var(txn.iss) -m str "${ISSUER}" } !path_account_auth_login !path_account_auth_register !path_account_revoke_token
  http-request deny deny_status 401 content-type 'application/json' string '{"error": "Invalid token: audience is not recognized."}' if !{ var(txn.aud) -m str "${AUDIENCE}" } !path_account_auth_login !path_account_auth_register !path_account_revoke_token
  http-request deny deny_status 401 content-type 'application/json' string '{"error": "Invalid token: signature verification failed."}' if !{ http_auth_bearer,jwt_verify(txn.alg,"/app/keys/public_key.pem") -m int 1 } !path_account_auth_login !path_account_auth_register !path_account_revoke_token
  http-request set-var(txn.now) date() unless path_account_auth_login path_account_auth_register path_account_revoke_token
  http-request deny deny_status 401 content-type 'application/json' string '{"error": "Authentication failed: Token has expired."}' if { var(txn.exp),sub(txn.now) -m int lt 0 } !path_account_auth_login !path_account_auth_register !path_account_revoke_token

  # Use the WebSocket backend when the Upgrade header is present and the path is /ws
  acl hdr_connection_upgrade hdr(Connection) -i upgrade
  acl hdr_upgrade_websocket hdr(Upgrade) -i websocket
  acl ws_request path -i /ws
  use_backend webservers_ws_core_engine if ws_request hdr_connection_upgrade hdr_upgrade_websocket

  # Define ACLs for path matching
  acl path_engine path_beg -i /engine
  acl path_conversations path_beg -i /conversations
  acl path_account path_beg -i /account

  # Use the appropriate backend based on the ACL
  use_backend webservers_core_engine if path_engine
  use_backend webservers_conversations if path_conversations
  use_backend webservers_account_auth_login if path_account_auth_login
  use_backend webservers_account_auth_login if path_account_auth_register
  use_backend webservers_account_auth_login if path_account_revoke_token
  use_backend webservers_account if path_account

backend webservers_account_auth_login
  http-request set-path %[path,regsub(^/account,)]
  server s4 auth:3001

backend webservers_conversations
  http-request set-path %[path,regsub(^/conversations,)]
  server s1 swift-rest-engine:3000 check

backend webservers_account
  http-request set-path %[path,regsub(^/account,)]
  server s2 auth:3001 check

backend webservers_ws_core_engine
  server ws_athena athena:9000

  # WebSocket specific configuration
  acl hdr_connection_upgrade hdr(Connection) -i upgrade
  acl hdr_upgrade_websocket hdr(Upgrade) -i websocket

  # Timeout for WebSocket
  timeout tunnel 1h

backend webservers_core_engine
  http-request set-path %[path,regsub(^/engine,)]
  server s5 athena:9000 check

